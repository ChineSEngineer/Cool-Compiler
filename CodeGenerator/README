README file for Programming Assignment 5  (C++ edition)
=======================================================

	The Makefile contains targets for compiling and running your
	program, as well as handing it in. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to
	fill the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct,
	and why your test cases are adequate. It is part of the
	assignment to clearly and concisely explain things in text as
	well as to comment your code. Just edit this file.

	In example.cl you should write a correct Cool program which
	tests as many aspects of the code generator as possible. It
	should pass your code generator, and running spim on the
	generated output should run the program correctly.

	cgen.cc is the skeleton file for the code generator. This
	skeleton is much larger than the ones for previous
	assignments.  The skeleton provides three components of the
	code generator:

		- functions to build the inheritance graph; (we supply
		  this in case you didn't get this working for PA4)

		- functions to emit global data and constants;
		 
		- functions to emit spim instructions; (we supply
		  these last two to save you some tedious coding)

	You should work to understand this code, and it will help you
        write the rest of the code generator.

	cgen.h is the header file for the code generator. Feel free to
	add anything you need.

	cgen_supp.cc is general support code for the code generator.
	You can add functions as you see fit, but do not modify the
    provided functions.

	emit.h defines a bunch of macros which should come in handy
	when you actually want to emit code. Feel free to change
	anything here to suit your needs.

        cgen-phase.cc supplies the driver for the compiler. You should
        not modify this code.

	symtab.h contains a symbol table implementation. You may
        modify this file if you'd like.

	cool.h contains definitions that are used by almost all parts
	of the compiler. DO NOT MODIFY.

        tree.h contains the base class `tree_node' of the AST nodes.
        DO NOT MODIFY.

        cool-tree.cc, cool-tree.h, and cool-tree.handcode.h contain
        the declarations and definitions of code generation AST nodes.
        You may add fields as you wish, but you shouldn't modify any
        of the methods already there except `code', which you may
        modify or remove as you wish.  Note that cool-tree.handcode.h
        is different from the same file in PA4---this file contains
        function definitions needed for the cgen.cc skeleton.  You may
        modify cool-tree.h or cool-tree.handcode.h, but don't modify
        cool-tree.cc.  Place all method definitions in cgen.cc

        Do not modify any other file.

Instructions
------------

	To compile your compiler and code generator type:

	% make

    This produces an executable named "cgen" which is standalone
    phase of the Cool compiler. The code generator executable
    accepts as input the output of the semant phase, so in order 
    to test it, you'll need to copy a lexer, parser, and semantic
    analyzer into the directory: either your own lexer and parser
    from the previous assignments, or the lexer, parser, and semantic
    analyzer from the reference implementation of the compiler.

	To run your compiler on the file example.cl, type:

	% make dotest

    This will produce a compiled assembly language file example.s
    and attempt to run it. You should examine the assembly language
    file to make sure that it makes sense.

    If you think your code generator checker is correct and behaves like
    the one we wrote, you can try it out by replacing the code
    generator in the reference compiler with your own code generator.
    Just copy your compiled cgen binary from this assignment into the
    directory where the reference compiler is.

    To submit your solution, run:

    % make zip

    Check the resulting zip file to make sure it contains everything
    it should. Then submit it on Gradescope.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA5
----------------

1. Explain design decisions, explain why your code is correct,
    and why your test cases are adequate.

Basically there are three steps for code generation phrase.
1) Generate code for constants, name table, object table, dispatch table, prototype objects, generate the tags for every class, which will be used for 'case' operation.
2) Traverse the classes and collect information. Record the number of temporary variales for every unit. Also construct the variable binding and method binding, which is very helpful for the next travesal. With these bindings, we can generate the 'get/set' code for variable and generate 'dispatch/static dispatch' code for methods.
3) Travesal and generate the code recursively. Remember to protect the stack while generating the code.
